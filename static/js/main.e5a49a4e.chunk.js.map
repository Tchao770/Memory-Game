{"version":3,"sources":["components/Card.js","components/Gamefield.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","onClick","title","clicked","src","url","alt","GameField","useState","score","setScore","highscore","useRef","useReducer","state","action","animeObj","setClicked","animeTitles","cardName","card","alreadyClicked","current","forEach","arr","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","Score","map","id","anime","imgUrl","this","animeIds","App","isLoading","setIsLoading","titles","titleClicked","useEffect","animeList","promises","i","push","axios","get","all","then","response","fetched","data","title_english","image_url","mal_id","arrObj","obj","animeObjs","catch","error","console","log","style","backgroundColor","textAlign","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5a49a4e.chunk.js","sourcesContent":["// import { useState, useRef, useReducer } from 'react';\r\n\r\nexport default function Card(props) {\r\n    return (\r\n        <div className=\"Card\" onClick=\r\n            {\r\n                () => {\r\n                    props.onClick(props.title, props.clicked)\r\n                }\r\n            }>\r\n            <p>{props.title}</p>\r\n            <img src={props.url} alt={props.title} />\r\n        </div>\r\n    )\r\n}","import { useState, useRef, useReducer, Fragment } from 'react';\r\nimport Card from \"./Card.js\"\r\n\r\nfunction shuffle(arr) {\r\n    var currentIndex = arr.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = arr[currentIndex];\r\n        arr[currentIndex] = arr[randomIndex];\r\n        arr[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return arr;\r\n}\r\n\r\nexport default function GameField(props) {\r\n    const [score, setScore] = useState(0);\r\n    const highscore = useRef(0);\r\n    const [clicked, setClicked] = useReducer(\r\n        (state, action) => ({ ...state, ...action })\r\n        , props.animeObj);\r\n    const [cardName] = useState(props.animeTitles);\r\n\r\n    function resetGame() {\r\n        setScore(0);\r\n        cardName.forEach((card) => {\r\n            setClicked({ [card.title]: false });\r\n        })\r\n    }\r\n\r\n    const onClick = (card, alreadyClicked) => {\r\n        if (alreadyClicked) {\r\n            if (score > highscore.current)\r\n                highscore.current = score;\r\n            resetGame();\r\n        }\r\n        else {\r\n            setScore(score + 1);\r\n            shuffle(cardName)\r\n            setClicked({ [card]: true });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h1 className=\"heading\">Memory Game: Isekai</h1>\r\n            <Score score={score} highscore={highscore.current} />\r\n            <div className=\"fieldContainer\">\r\n                {\r\n                    cardName.map((card) => {\r\n                        return (\r\n                            <Card title={card.title} onClick={onClick} key={card.id} clicked={clicked[card.title]} url={card.url} />\r\n                        );\r\n\r\n                    })\r\n                }\r\n            </div>\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nfunction Score(props) {\r\n    return (\r\n        <div className=\"scoreCounter\">\r\n            <p>Score: {props.score}</p>\r\n            <p>Highscore: {props.highscore}</p>\r\n        </div>\r\n    );\r\n}","import './App.css';\nimport { useEffect, useState, useRef } from 'react';\nimport GameField from './components/Gamefield.js';\nimport axios from 'axios';\n\nfunction animeTitles(animeList) {\n    let arr = [];\n    animeList.forEach(title => {\n        arr.push({\n            \"title\": title.anime,\n            \"url\": title.imgUrl\n        });\n    })\n    return arr;\n};\n\nfunction animeObjs(animeList) {\n    let arrObj = {};\n    animeList.forEach(obj => {\n        arrObj[obj.anime] = false;\n    })\n    return arrObj;\n}\n\nfunction animeObj(anime, imgUrl, id) {\n    this.anime = anime;\n    this.imgUrl = imgUrl;\n    this.id = id;\n}\n\nconst animeIds = [31240, 11757, 29803, 30831, 35790, 37430, 15809, 19815, 15315];\n\nfunction App() {\n    const [isLoading, setIsLoading] = useState(true);\n    const titles = useRef();\n    const titleClicked = useRef();\n\n    // Responseible for API call\n    useEffect(() => {\n        const animeList = [], promises = [];\n        \n        // Put all requests into a promise array\n        for (let i = 0; i < animeIds.length; i++) {\n            let url = `https://api.jikan.moe/v3/anime/${animeIds[i]}`\n            promises.push(axios.get(url));\n        }\n\n        // All called and then pushed into anime list array\n        axios.all(promises)\n            .then(response => {\n                response.forEach((fetched) => {\n                    const { title_english, image_url, mal_id } = fetched.data;\n                    animeList.push(new animeObj(title_english, image_url, mal_id, animeList));\n                })\n\n                // Refactor data into necessary format for card display and click logic\n                titles.current = animeTitles(animeList);\n                titleClicked.current = animeObjs(animeList);\n                setIsLoading(false);\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }, []);\n\n    if (isLoading) {\n        return (\n            <h1 style={{ backgroundColor: \"white\", textAlign: \"center\" }}>Loading...</h1>\n        )\n    }\n    else {\n        return (\n            <div className=\"container\">\n                <GameField animeTitles={titles.current} animeObj={titleClicked.current} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}